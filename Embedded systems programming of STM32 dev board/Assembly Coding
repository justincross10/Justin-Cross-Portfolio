/*
 * assembly.s
 *
 */

 @ DO NOT EDIT
	.syntax unified
    .text
    .global ASM_Main
    .thumb_func

@ DO NOT EDIT
vectors:
	.word 0x20002000
	.word ASM_Main + 1

@ DO NOT EDIT label ASM_Main
ASM_Main:

	@ Some code is given below for you to start with
	LDR R0, RCC_BASE  		@ Enable clock for GPIOA and B by setting bit 17 and 18 in RCC_AHBENR
	LDR R1, [R0, #0x14]
	LDR R2, AHBENR_GPIOAB	@ AHBENR_GPIOAB is defined under LITERALS at the end of the code
	ORRS R1, R1, R2
	STR R1, [R0, #0x14]

	LDR R0, GPIOA_BASE		@ Enable pull-up resistors for pushbuttons
	MOVS R1, #0b01010101
	STR R1, [R0, #0x0C]
	LDR R1, GPIOB_BASE  	@ Set pins connected to LEDs to outputs
	LDR R2, MODER_OUTPUT
	STR R2, [R1, #0]
	MOVS R2, #0         	@ NOTE: R2 will be dedicated to holding the value on the LEDs

@ TODO: Add code, labels and logic for button checks and LED patterns

main_loop:

    LDR R0, GPIOA_BASE        @ Load GPIOA base address
    LDR R4, [R0, #0x10]       @ Load GPIOA_IDR to check pushbutton state

    @ Check if no buttons are pressed
    MOVS R7, #0b1111     @ Move 0b1111 into R5
    ANDS R4, R4, R7           @ Update R4 value using bitwise AND
    CMP R4, #0b1111        @ Check if no buttons are pressed
    BEQ increment_default       @ If no buttons are pressed, use default increment

    MOVS R7, #0b1111               @ Move 0b0010 into R7 to isolate PA1 (bit 1)
    ANDS R4, R4, R7           @ Update R4 value using bitwise AND
    CMP R4, #0b1101                @ Check if PA1 is pressed
    BEQ call_short_delay      @ If PA1 is pressed, go to short delay

    MOVS R7, #0b1111               @ Move 0b0100 into R6 to isolate PA (bit 2)
    ANDS R4, R4, R7           @ Update R4 value using bitwise AND
    CMP R4, #0b1011                @ Check if PA2 is pressed
    BEQ led_pattern

    MOVS R7, #0b1111               @ Move 0b0001 into R6 to isolate PA0 (bit 0)
    ANDS R4, R4, R7           @ Update R4 value using bitwise AND
    CMP R4, #0b1110               @ Check if PA0 is pressed
    BEQ increment_by_two      @ If PA0 is pressed, increment by 2


increment_by_two:
    ADDS R2, R2, #2           @ Increment by 2 if PA0 is pressed
    BL long_delay              @ Use long delay for 0.7 seconds
    B mask_leds                @ Go to mask LEDs

call_short_delay:
    ADDS R2, R2, #1
    BL short_delay             @ Call short delay if PA1 is pressed
    B mask_leds

led_pattern:
    LDR R1, GPIOB_BASE      @ Load the base address of GPIOB
    MOVS R2, #0b10101010    @ Load LED pattern into R2
    STR R2, [R1, #0x14]     @ Write the pattern to GPIOB ODR
    B mask_leds                    @ Return from function

increment_default:
    ADDS R2, R2, #1           @ Default increment by 1 if neither button is pressed
    BL long_delay              @ Use long delay for 0.7 seconds
    LDR R4, [R0, #0x10]       @ Load GPIOA_IDR to check pushbutton state
    B mask_leds                @ Go to mask LEDs

mask_leds:
    LDR R3, =0xFF             @ Load the mask value (0xFF) into R3
    ANDS R2, R2, R3           @ Mask off any overflow (restrict to 8 bits)

write_leds:
    STR R2, [R1, #0x14]       @ Write the LED value to GPIOB ODR
    B main_loop               @ Repeat the loop

@ Long Delay function
long_delay:
    LDR R3, LONG_DELAY_CNT    @ Load delay counter value
delay_loop:
    SUBS R3, R3, #1           @ Decrement delay counter
    BNE delay_loop            @ If not zero, continue loop
    BX LR                     @ Return to main loop

@ Short Delay function (for 0.3 seconds)
short_delay:
    LDR R3, SHORT_DELAY_CNT   @ Load short delay counter value
short_delay_loop:
    SUBS R3, R3, #1           @ Decrement delay counter
    BNE short_delay_loop      @ If not zero, continue loop
    BX LR                     @ Return to main loop

@ LITERALS; DO NOT EDIT
    .align
RCC_BASE:           .word 0x40021000
AHBENR_GPIOAB:     .word 0b1100000000000000000
GPIOA_BASE:        .word 0x48000000
GPIOB_BASE:        .word 0x48000400
MODER_OUTPUT:      .word 0x5555

@ Set your delay values here (adjust as needed for 0.7 second delay and 0.3 second delay)
LONG_DELAY_CNT:    .word 1400000    @ Example value for 0.7 second delay
SHORT_DELAY_CNT:   .word 600000     @ Example value for 0.3 second delay
